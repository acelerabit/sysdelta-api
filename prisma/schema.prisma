// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  PRESIDENT
  COUNCILOR
  SECRETARY
  ASSISTANT
}

model CityCouncil {
  id   String @id @default(uuid())
  name String

  councilMembers User[]

  responsible Responsible?

  @@map("city_council")
}

model User {
  id String @id @default(uuid())

  name                String
  email               String  @unique
  password            String?
  avatarUrl           String? @map("avatar_url")
  acceptNotifications Boolean @default(false) @map("accept_notifications")

  role Role @default(ASSISTANT)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  notifications Notification[]

  affiliatedCouncil   CityCouncil? @relation(fields: [affiliatedCouncilId], references: [id])
  affiliatedCouncilId String?

  responsible Responsible?

  @@index([email])
  @@map("users")
}

model Responsible {
  id String @id @default(uuid())

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  cityCouncil   CityCouncil @relation(fields: [cityCouncilId], references: [id])
  cityCouncilId String      @unique
}

model Notification {
  id String @id @default(uuid())

  message String
  read    Boolean @default(false)

  user User? @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  userId    String?  @map("user_id")

  @@map("notifications")
}

enum Actions {
  UPDATE
}

model Log {
  id        String  @id @default(uuid())
  action    Actions
  after     Json?
  before    Json?
  modelName String  @map("model_name")
  data      Json

  @@map("logs")
}
