// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  PRESIDENT
  COUNCILOR
  SECRETARY
  ASSISTANT
}

model CityCouncil {
  id    String @id @default(uuid())
  name  String
  city  String
  state String
  cnpj  String @unique

  councilMembers User[]

  responsible Responsible?

  active Boolean @default(false)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  sessions  Session[]

  legislativeMatters LegislativeMatter[]

  @@map("city_council")
}

model User {
  id String @id @default(uuid())

  name                String
  email               String  @unique
  password            String?
  avatarUrl           String? @map("avatar_url")
  acceptNotifications Boolean @default(false) @map("accept_notifications")
  phone               String? @unique
  cpf                 String? @unique
  politicalParty      String? @map("political_party")

  role Role @default(ASSISTANT)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  notifications Notification[]

  affiliatedCouncil   CityCouncil? @relation(fields: [affiliatedCouncilId], references: [id], onDelete: Cascade)
  affiliatedCouncilId String?

  responsible Responsible?
  active      Boolean      @default(false)

  legislativeMatter   LegislativeMatter? @relation("councilors_who_voted", fields: [legislativeMatterId], references: [id])
  legislativeMatterId String?

  legislativeMatters LegislativeMatter[]

  sessionAbsent   Session? @relation("absent_councilors", fields: [sessionAbsentId], references: [id])
  sessionAbsentId String?

  sessionPresent   Session? @relation("present_councilors", fields: [sessionPresentId], references: [id])
  sessionPresentId String?

  @@index([email])
  @@map("users")
}

model Responsible {
  id String @id @default(uuid())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique

  cityCouncil   CityCouncil @relation(fields: [cityCouncilId], references: [id], onDelete: Cascade)
  cityCouncilId String      @unique
}

enum SessionTypes {
  ORDINARY
}

enum SessionStatus {
  SCHEDULED
  STARTED
  SUSPENDED
  POSTPONED
  CLOSED
  CANCELED
}

model Session {
  id String @id @default(uuid())

  legislature        String
  legislativeSession String
  type               SessionTypes
  numberSession      Int
  openingDateTime    DateTime
  closingDateTime    DateTime
  sessionStatus      SessionStatus

  createdAt DateTime @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  office            Office?
  orderDay          OrderDay?
  legislativeMatter LegislativeMatter[]

  cityCouncil   CityCouncil @relation(fields: [cityCouncilId], references: [id])
  cityCouncilId String

  absentCouncilors  User[] @relation("absent_councilors")
  presentCouncilors User[] @relation("present_councilors")
}

model OrderDay {
  id String @id @default(uuid())

  createdAt DateTime @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  summary   String

  session   Session @relation(fields: [sessionId], references: [id])
  sessionId String  @unique

  legislativeMatters LegislativeMatter[]
}

model Office {
  id String @id @default(uuid())

  createdAt DateTime @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  summary   String

  session   Session @relation(fields: [sessionId], references: [id])
  sessionId String  @unique

  legislativeMatters LegislativeMatter[]
}

enum VotingType {
  SECRET
  NOMINAL
}

enum LegislativeMatterStatus {
  PUBLISHED
  DISCUSSED
  VOTED_ON
  ADOPTED
  REJECTED
  POSTPONED
  WITHDRAW
}

model LegislativeMatter {
  id String @id @default(uuid())

  type             String
  summary          String
  presentationDate DateTime
  code             String
  title            String
  votingType       VotingType?
  status           LegislativeMatterStatus

  createdAt DateTime @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  office   Office? @relation(fields: [officeId], references: [id])
  officeId String?

  orderDay   OrderDay? @relation(fields: [orderDayId], references: [id])
  orderDayId String?

  session   Session? @relation(fields: [sessionId], references: [id])
  sessionId String?

  author   User?   @relation(fields: [authorId], references: [id])
  authorId String?

  authors String?

  councilorsWhoVoted User[] @relation("councilors_who_voted")

  cityCouncil   CityCouncil? @relation(fields: [cityCouncilId], references: [id])
  cityCouncilId String?
}

model Notification {
  id String @id @default(uuid())

  message String
  read    Boolean @default(false)

  user User? @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  userId    String?  @map("user_id")

  @@map("notifications")
}

enum Actions {
  UPDATE
}

model Log {
  id        String  @id @default(uuid())
  action    Actions
  after     Json?
  before    Json?
  modelName String  @map("model_name")
  data      Json

  @@map("logs")
}
